name: Incorporate Copilot Suggestions

on:
  pull_request_review:
    types: [submitted]

jobs:
  incorporate-suggestions:
    if: github.event.review.body contains 'GitHub Copilot:'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Apply Copilot suggestions
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            // Get all review comments
            const { data: comments } = await github.rest.pulls.listReviewComments({
              owner,
              repo,
              pull_number
            });
            
            // Filter for Copilot suggestions
            const copilotComments = comments.filter(comment => 
              comment.body.startsWith('GitHub Copilot:') && 
              comment.body.includes('```suggestion')
            );
            
            console.log(`Found ${copilotComments.length} Copilot suggestions`);
            
            if (copilotComments.length === 0) {
              return;
            }
            
            // Apply each suggestion
            for (const comment of copilotComments) {
              const suggestionMatch = comment.body.match(/```suggestion\n([\s\S]*?)```/);
              if (!suggestionMatch) continue;
              
              const suggestion = suggestionMatch[1];
              const path = comment.path;
              const position = comment.position;
              
              // Get the file content
              const { data: fileContent } = await github.rest.repos.getContent({
                owner,
                repo,
                path,
                ref: context.payload.pull_request.head.ref
              });
              
              // Decode content
              const content = Buffer.from(fileContent.content, 'base64').toString();
              
              // Get the diff hunk to determine where to apply the change
              const diffHunk = comment.diff_hunk;
              const lines = content.split('\n');
              
              // Find the line number from the diff hunk
              const lineMatch = diffHunk.match(/@@ -\d+,\d+ \+(\d+),\d+ @@/);
              if (!lineMatch) continue;
              
              const startLine = parseInt(lineMatch[1], 10) - 1;
              const hunkLines = diffHunk.split('\n').slice(1);
              
              // Find the exact position to apply the change
              let lineIndex = startLine;
              for (const hunkLine of hunkLines) {
                if (hunkLine.startsWith('-')) continue;
                if (hunkLine.startsWith('+')) {
                  lineIndex++;
                  continue;
                }
                lineIndex++;
              }
              
              // Apply the suggestion
              lines[lineIndex - 1] = suggestion;
              
              // Update the file
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path,
                message: `Apply Copilot suggestion from PR #${pull_number}`,
                content: Buffer.from(lines.join('\n')).toString('base64'),
                sha: fileContent.sha,
                branch: context.payload.pull_request.head.ref
              });
              
              // Add a reply to the comment
              await github.rest.pulls.createReplyForReviewComment({
                owner,
                repo,
                pull_number,
                comment_id: comment.id,
                body: 'Applied this suggestion automatically.'
              });
            }
            
            // Add a comment to the PR
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `Applied ${copilotComments.length} Copilot suggestions automatically. Please review the changes.`
            });

      - name: Update PR labels
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            
            // Get the PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issue_number
            });
            
            // Initialize labels array with existing labels
            const labels = [...pr.labels.map(label => label.name)];
            
            // Remove changes requested label if present
            const changesRequestedIndex = labels.indexOf('status: changes requested');
            if (changesRequestedIndex > -1) {
              labels.splice(changesRequestedIndex, 1);
            }
            
            // Add status label
            if (!labels.includes('status: review passed')) labels.push('status: review passed');
            
            // Update PR labels
            await github.rest.issues.setLabels({
              owner,
              repo,
              issue_number,
              labels
            });
            
            console.log(`Updated labels: ${labels.join(', ')}`);
